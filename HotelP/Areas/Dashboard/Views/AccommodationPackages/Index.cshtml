@model Hotel.Areas.Dashboard.ViewModels.AccommodationPackagesListingModel


<div class="row">
    <div class="col-lg-12">
        <h2>Accommodation Packages</h2>
        <hr />
    </div>
</div>

<div class="row mb-3">
    <div class="col-lg-12">
        <form>
            <div class="input-group">
                <input type="text" name="searchterm" class="form-control" placeholder="Search." value="@Model.SearchTerm" />

                @if (Model.AccommodationTypes != null && Model.AccommodationTypes.Count() > 0)
                {
                    <select name="AccommodationTypeID" class="form-control">
                        <option value="0">Select Type</option>
                        @foreach (var AccommodationType in Model.AccommodationTypes)
                        {
                            <option value="@AccommodationType.ID" @(AccommodationType.ID == Model.AccommodationTypeID ? "selected" : string.Empty)>
                                @AccommodationType.Name
                            </option>
                        }
                    </select>
                }

                <div class="input-group-append">
                    <button class="btn btn-outline-primary" type="submit"> <i class="fa-solid fa-magnifying-glass mr-1"></i> Szukaj</button>
                    <a href="@Url.Action("Index", "AccommodationPackages")" class="btn btn-outline-secondary"> <i class="fa-solid fa-rotate-right mr-1"></i> Reset </a>
                    <button data-href="@Url.Action("Action", "AccommodationPackages", new { area = "Dashboard" })"
                            class="btn btn-outline-success create-btn"
                            type="button"
                            data-bs-toggle="modal"
                            data-bs-target="#actionModal">
                        <i class="fa-solid fa-plus mr-1"></i> Create
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<div class="row">
    <div class="col-lg-12">
        @{
            Html.RenderPartial("_Listing", Model);
        }
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="actionModal" tabindex="-1" aria-labelledby="actionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
    </div>
</div>

@section Scripts {
    <script>

        //---------------------------------------------------
        // A. Obsługa przycisków Create / Edit / Delete
        //---------------------------------------------------
        // Zależnie od Twojego kodu, przypisz odpowiednie selektory (np. .create-btn, .edit-btn, .delete-btn)

        // Przykład: wczytuje partial do modala przy kliknięciu "Create"
        $(document).on("click", ".create-btn", function (e) {
            e.preventDefault();
            const url = $(this).data("href");

            $.get(url, function (responseHtml) {
                $("#actionModal .modal-dialog").html(responseHtml);
                $("#actionModal").modal("show");
            });
        });

        // Analogicznie przy "Edit"
        $(document).on("click", ".edit-btn", function (e) {
            e.preventDefault();
            const url = $(this).data("href");

            $.get(url, function (responseHtml) {
                $("#actionModal .modal-dialog").html(responseHtml);
                $("#actionModal").modal("show");
            });
        });

        // Analogicznie przy "Delete"
        $(document).on("click", ".delete-btn", function (e) {
            e.preventDefault();
            const url = $(this).data("href");

            $.get(url, function (responseHtml) {
                $("#actionModal .modal-dialog").html(responseHtml);
                $("#actionModal").modal("show");
            });
        });

        // Obsługa potwierdzenia usunięcia (przycisk "Delete" wewnątrz modala)
        $(document).on("click", "#deleteButton", function (e) {
            e.preventDefault();
            const formData = $("#deleteAccommodationPackagesForm").serialize();

            $.ajax({
                url: '@Url.Action("Delete", "AccommodationPackages")',
                type: 'POST',
                data: formData,
                success: function (result) {
                    if (result && result.success) {
                        alert("Rekord został pomyślnie usunięty!");
                        $("#actionModal").modal("hide");
                        location.reload();
                    } else {
                        alert("Błąd: " + (result.message || "Nieznany błąd."));
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Status błędu:", status);
                    console.error("Błąd:", error);
                    console.error("Odpowiedź serwera:", xhr.responseText);
                    alert("Wystąpił błąd podczas usuwania rekordu.");
                }
            });
        });


        //---------------------------------------------------
        // B. Upload plików (#selectPictures) -> Dashboard/UploadPictures
        //---------------------------------------------------
        $(document).on("change", "#selectPictures", function () {
            console.log("Zmiana pliku w input#selectPictures. Pliki:", this.files);

            var pictures = this.files;
            var formData = new FormData();

            for (var i = 0; i < pictures.length; i++) {
                console.log("Dodaję do formData plik:", pictures[i].name);
                // Klucz "Picture" -> [FromForm] List<IFormFile> Picture w kontrolerze
                formData.append("Picture", pictures[i]);
            }

            $.ajax({
                url: '@Url.Action("UploadPictures", "Dashboard", new { area = "Dashboard" })',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false
            })
                .done(function (response) {
                    console.log("== Odpowiedź serwera (UploadPictures) ==", response);

                    // Zakładam, że response to tablica obiektów: [{ id=..., url=... }, ...]
                    for (var i = 0; i < response.length; i++) {
                        var pic = response[i];
                        console.log("Dodaję #picturesArea obrazek o ID =", pic.id, ", url =", pic.url);

                        // W partialu `_Action.cshtml` powinieneś mieć <div id="imageTemplate" style="display:none;"> z <img>
                        // Tworzymy klona:
                        var $template = $("#imageTemplate").clone();
                        $template.removeAttr("id");
                        $template.show();

                        // Ustawiamy src, data-id, itp.
                        $template.find("img").attr("src", "/images/site/" + pic.url);
                        $template.find("img").attr("data-id", pic.id);

                        // Doklejamy do #picturesArea
                        $("#picturesArea").append($template.html());
                    }
                })
                .fail(function (xhr, status, error) {
                    alert("Błąd przy uploadzie plików!");
                    console.error("== Odpowiedź serwera (UploadPictures Error) ==");
                    console.error("Status:", status);
                    console.error("Error:", error);
                    console.error("Response text:", xhr.responseText);
                });
        });


        //---------------------------------------------------
        // C. Kliknięcie przycisku #saveButton -> AccommodationPackages/Action
        //---------------------------------------------------
        $(document).on("click", "#saveButton", function (e) {
            e.preventDefault();
            console.log("== Zdarzenie #saveButton kliknięte ==");

            // 1. Zbieramy ID-y obrazków:
            var pictureIDs = [];
            $("#picturesArea img").each(function () {
                var picID = $(this).attr("data-id");
                console.log("Znaleziono obrazek z data-id =", picID);
                if (picID) {
                    pictureIDs.push(picID);
                }
            });

            // 2. Wpisujemy do hidden #pictureIDs
            $("#pictureIDs").val(pictureIDs.join());
            console.log("Ustawiam #pictureIDs =", $("#pictureIDs").val());

            // 3. Serializacja formularza
            var formData = $("#createAccommodationPackagesForm").serialize();
            console.log("Seryjalizacja formularza:\n", formData);

            // 4. AJAX
            $.ajax({
                url: '@Url.Action("Action", "AccommodationPackages")',
                type: 'POST',
                data: formData,
                success: function (result) {
                    console.log("== Odpowiedź serwera (success) ==", result);

                    if (result && result.success) {
                        alert("Dane zostały zapisane pomyślnie!");
                        $("#actionModal").modal("hide");
                        location.reload();
                    } else {
                        $(".errorDiv").html(result.message || "Wystąpił nieznany błąd.");
                        alert("Błąd: " + (result.message || "Nieznany błąd."));
                    }
                },
                error: function (xhr, status, error) {
                    console.error("== Odpowiedź serwera (error) ==");
                    console.error("Status błędu:", status);
                    console.error("Treść błędu:", error);
                    console.error("Odpowiedź serwera:", xhr.responseText);
                    alert("Wystąpił błąd podczas zapisu danych. Sprawdź logi w konsoli.");
                }
            });
        });


        //---------------------------------------------------
        // D. Funkcja removeMe -> usuwanie <img> z #picturesArea
        //---------------------------------------------------
        window.removeMe = function (element) {
            console.log("Usuwam obrazek z data-id =", $(element).attr("data-id"));
            $(element).remove();
        };

    </script>
}
